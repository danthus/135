#include <iostream>
using namespace std;
#include <math.h>

class String
{
public:
    ~String();
    String(const String& );
    String operator = (const String );
    String ();
    String (const char*);
    friend ostream& operator << (ostream&, const String& );
    int length () const;
    char& operator [] (const int);
    
private:
    char* str;
    int len;
};

String::~String()
{
    delete []str;
    cout<<"destructor"<<endl; //delete
}

String::String(const String& origin)
{
    len = origin.len;
    str = new char[origin.len];
    for(int n=0 ;n<origin.len; n++)
        str[n] = origin.str[n];
    
    cout<<"string copy"<<endl; //delete
}

String String::operator = (String origin)
{
    len = origin.len;
    str = new char[len];
    for(int n=0; n<len; n++)
        str[n] = origin.str[n];
    
    return origin;
}


String::String(const char* c_string)
{
    len=0;
    while(c_string[len] != '\0')
        len++;
    
    str = new char[len];
    
    for(int n=0;n<len;n++)
        str[n] = c_string[n];
}

ostream& operator << (ostream& out, const String& s)
{
    for(int n=0; n<s.len; n++)
        out<<s.str[n];
    
    return out;
}

int String::length() const
{
    return len;
}

char& String::operator [] (int index)
{
    if(index >= len || index < 0)
    {
        cout<<"wrong index value"<<endl;
        exit(1);
    }
    else
        return str[index];
}

int compare_cstrs (const char* first, const char* second)
{
    int len1 = 0;
    while(first[len1]!='\0')
        len1++;
    int len2 = 0;
    while(second[len2]!='\0')
        len2++;
    
    int max = len1>len2? len1:len2;
    
    int count=0;
    for(int n=0; n<max; n++)
    {
        if(first[n]>second[n])
            return 1;
        else if(first[n]<second[n])
            return -1;
        else
        {
            count++;
            continue;
        }
    }
    return 0;
}

int compare_strings (String first, String second)
{
    int len1 = first.length();
    int len2 = second.length();
    
    int min = len1<len2? len1:len2;
    for(int n=0; n<min; n++)
    {
        if(first[n]>second[n])
            return 1;
        else if(first[n]<second[n])
            return -1;
        else
            continue;
    }
    if(len1>len2)
        return 1;
    else if(len1<len2)
        return -1;
    else
        return 0;
}

class Polynomial
{
public:
    Polynomial();
    Polynomial(const Polynomial&);
    Polynomial(const double*, int);
    Polynomial(const double);
    Polynomial operator = (const Polynomial);
    ~Polynomial();
    
    friend Polynomial operator + (Polynomial, Polynomial);
    friend Polynomial operator - (Polynomial, Polynomial);
    friend Polynomial operator * (Polynomial, Polynomial);
    double& operator [] (const int );
    double evaluate(const double );
    friend ostream& operator << (ostream&, const Polynomial);
private:
    double* coefficients;
    int terms;
};

Polynomial::Polynomial()
{
    coefficients = new double(0);
    terms = 1;
}

Polynomial::Polynomial(const Polynomial& origin)
{
    terms = origin.terms;
    coefficients = new double[terms];
    for(int n=0; n<terms; n++)
        coefficients[n] = origin.coefficients[n];
}

Polynomial::Polynomial(const double* arr, int length)
{
    terms = length;
    coefficients = new double[length];
    for(int n=0; n<length; n++)
        coefficients[n] = arr[n];
}

Polynomial::Polynomial(const double const_variable)
{
    terms = 1;
    coefficients = new double(const_variable);
}

Polynomial Polynomial::operator = (const Polynomial origin)
{
    terms = origin.terms;
    coefficients = new double[terms];
    for(int n=0; n<terms; n++)
        coefficients[n] = origin.coefficients[n];
    return origin;
}

Polynomial::~Polynomial()
{
    delete []coefficients;
}

Polynomial operator + (Polynomial first, Polynomial second)
{
    int max = first.terms > second.terms? first.terms:second.terms;
    if(first.terms == second.terms)
    {
        for(int n=max-1; n>=0; n--)
        {
            if(first.coefficients[n] + second.coefficients[n]==0)
                max--;
            else
                break;
        }
    }
    Polynomial sum;
    sum.terms = max;
    sum.coefficients = new double[max];
    for(int n=0; n<max; n++)
        sum.coefficients[n] = first.coefficients[n] + second.coefficients[n];
    return sum;
}

Polynomial operator - (Polynomial first, Polynomial second)
{
    
    int max = first.terms > second.terms? first.terms:second.terms;
    if(first.terms == second.terms)
    {
        for(int n=max-1; n>0; n--)
        {
            if(first.coefficients[n] - second.coefficients[n]==0)
                max--;
            else
                break;
        }
    }
    cout<<max<<endl;
    Polynomial quotient;
    quotient.terms = max;
    quotient.coefficients = new double[max];
    for(int n=0; n<max; n++)
        quotient.coefficients[n] = first.coefficients[n] - second.coefficients[n];
    return quotient;
}

Polynomial operator * (Polynomial first, Polynomial second)
{
    if(first.terms == 1 && first.coefficients[0] == 0)
        return Polynomial();
    if(second.terms == 1 && second.coefficients[0] == 0)
        return Polynomial();
    
    Polynomial product;
    product.terms = first.terms+second.terms-2;
    product.coefficients = new double[product.terms];
    
    for(int n=0; n<first.terms; n++)
    {
        for(int i=0; i<second.terms; i++)
            product.coefficients[n+i] = first.coefficients[n]*second.coefficients[i];
    }
    return product;
}

double& Polynomial::operator [] (const int index)
{
    if(index<0)
    {
        cout<<"wrong index value"<<endl;
        exit(1);
    }
    else if(index>=0 && index<=terms-1)
        return coefficients[index];
    else
    {
        double* temp = new double[index+1];
        for(int n=0; n<terms; n++)
            temp[n] = coefficients[n];
        for(int n=terms; n<index+1; n++)
            temp[n] = 0;
        delete []coefficients;
        coefficients = temp;
        terms = index+1;
        return coefficients[index];
    }
}

double Polynomial::evaluate (const double input)
{
    double sum = 0;
    for(int n=0; n<terms; n++)
        sum = sum + coefficients[n]*pow(input, n);
    return sum;
}

ostream& operator << (ostream& out, const Polynomial origin)
{
    if(origin.terms ==1)
    {
        out<<origin.coefficients[0];
        return out;
    }
    
    out<<origin.coefficients[origin.terms-1];
    out<<"x^"<<origin.terms-1;
    for(int n=origin.terms-2; n>=1; n--)
    {
        if(origin.coefficients[n]>=0)
            out<<" + "<<origin.coefficients[n]<<"x^"<<n;
        else
            out<<" - "<<-1 * origin.coefficients[n]<<"x^"<<n;
    }
    if(origin.coefficients[0]>=0)
        out<<" + "<<origin.coefficients[0];
    else
        out<<" - "<<-1 * origin.coefficients[0];
    return out;
}


void foo(String a)  //delete
{
    cout<<"inside foo"<<endl;
}

int main()  //delete
{
    double* a = new double[3];
    a[0]=5; a[1]=2; a[2]=3;
    
    double* b = new double[3];
    b[0]=3; b[1]=3; b[2]=5;
    
    Polynomial A(a,3);
    Polynomial B(b,3);
    
    Polynomial C = A-B;
    cout<<A<<endl;
    cout<<B<<endl;
    cout<<C<<endl;
    
    C[7] = -5;
    cout<<C<<endl;
    
    cout<<A.evaluate(-3)<<endl;
    
    
    return 0;
}
