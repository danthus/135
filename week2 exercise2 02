#include <iostream>
#include <ctime>
#include <cstdlib>
using namespace std;

class Die // Represents a 6-face die object
{
public:

    Die();
	// initialize the die's face value to be 1

    int roll();
    // roll the die and returns the resulted face value

    int getFaceValue();
	int getFaceDown();

	void setFaceValue(int value);
	// if the value is valid (between 1 and 6), set the face value to be the value
	// otherwise, do nothing


private:

    int faceValue;	// stores the current face value of the die
};

// Complete the implementation of the Die class. Member function roll is already provided

Die::Die()
{
	faceValue=1;
}

int Die::roll()
{
	// faceValue is randomly generated between 1 and 6
	faceValue = rand() % 6 + 1;
	return faceValue;
}

int Die::getFaceValue()
{
	return faceValue;
}

int Die::getFaceDown()
{
	int FaceDown=7-faceValue;
	return FaceDown;
}

void Die::setFaceValue(int value)
{
	if(value>=1&&value<=6)
		faceValue=value;
}

//class of two dices

class PairOfDice
{
public:
	//default constructor
	PairOfDice();

	void rollPair();
	int sumOfPair();

private:
	Die pairOne;
	Die pairTwo;
};

PairOfDice::PairOfDice() //default, set two dices facevalue to 1
{
	pairOne.setFaceValue(1);
	pairTwo.setFaceValue(1);
}

void PairOfDice::rollPair()
{
	pairOne.roll();
	pairTwo.roll();
}

int PairOfDice::sumOfPair()
{
	int sum=pairOne.getFaceValue() + pairTwo.getFaceValue();
	
	return sum;
}

int main()
{
    int integer;
    cout<<"enter a positive integer :";
    cin>>integer;
    
    PairOfDice* store=new PairOfDice[integer];
    
    for(int i=0;i<10;i++)
        store[i].rollPair();
    
    int max=store[0].sumOfPair();
    for(int i=1;i<10;i++)
        if(max<store[i].sumOfPair())
            max=store[i].sumOfPair();
            
    cout<<"the largest face value of all is "<<max<<endl;
    
    return 0;
}
