#include <iostream>
using namespace std;

class Fraction
{
public:
	Fraction();
	Fraction(int d);
	Fraction(int n, int d);
	Fraction simplify() const; // this function may change the object
	void output();

	bool equal(Fraction f); // // this function may change the object
friend bool equal(Fraction f1, Fraction f2);

private:
	int numerator;
	int denominator;
};

Fraction::Fraction()
{
	numerator = 1;
	denominator = 1;
}

Fraction::Fraction(int d)
{
	numerator = 1;
	denominator = d;
}

Fraction::Fraction(int n, int d)
{
	numerator = n;
	denominator = d;
}

Fraction Fraction::simplify() const
{
	int gcd = 1;
	int nume=numerator;
	int deno=denominator;
	int divisor = (numerator <= denominator) ? numerator : denominator;
	while(divisor > 0){	// Try to find the greatest common divisor of numerator and denominator.
				// Euclidean algorithm is more efficient. But this one is easier to understand.
		if(numerator % divisor == 0 && denominator % divisor == 0){
			gcd = divisor;
			break; // At this point, the while loop must stop.
		}
		else
			divisor--;
	}
	nume /= gcd;	// The function "simplify" possibly changes this Fraction object!!
	deno /= gcd;

	return Fraction(nume, deno);
}

bool Fraction::equal(Fraction f)
{
	simplify(); // Note: "simplify" function possibly changes the object.
	f.simplify();
	return numerator == f.numerator && denominator == f.denominator;
}

bool equal(Fraction f1, Fraction f2) // equal function
{
	f1.simplify();	// Note: "simplify" function possibly changes the object.
	f2.simplify();
	return f1.numerator == f2.numerator && f1.denominator == f2.denominator;
}

void Fraction::output()
{
	cout << numerator << "/" << denominator << endl;
}


int main(){
	Fraction num1 (4,12), num2;
	Fraction num3 (1,1);

	Fraction simplifiedNum1 = num1.simplify();

	simplifiedNum1.output();

	system("pause");
	return 0;
}
